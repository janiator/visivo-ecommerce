{
    "conflicts": [
        {
            "id": "c72a9698-04bb-46d9-950d-c90de819fbc7",
            "currentContent": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Models\\Product;\nuse Filament\\Forms;\nuse Filament\\Resources\\Form;\nuse Filament\\Resources\\Resource;\nuse Filament\\Tables\\Table;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Tables;\nuse Filament\\Forms\\Components\\Fieldset;\nuse Filament\\Forms\\Components\\Split;\nuse Filament\\Forms\\Components\\Section;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\ProductResource\\Pages;\nuse Filament\\Facades\\Filament;\n\nclass ProductResource extends Resource\n{\n    /**\n     * The model the resource represents.\n     *\n     * @var string|null\n     */\n    protected static ?string $model = Product::class;\n\n    /**\n     * Multi-tenancy: specify the relationship on the Product model that connects it to a store.\n     * Since each product belongs to a single store via store_id, we set it to 'store'.\n     *\n     * @var string|null\n     */\n    protected static ?string $tenantOwnershipRelationshipName = 'store';\n\n    // Navigation configuration.\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n    protected static ?int $navigationSort = 1;\n    protected static ?string $navigationGroup = 'Butikk';\n\n    /**\n     * Labels used in the Filament UI.\n     */\n    public static function getModelLabel(): string\n    {\n        return __('crud.products.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.products.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.products.collectionTitle');\n    }\n\n\n    /**\n     * Define the table used to list products.\n     */\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s') // Auto-refresh the table every 60 seconds.\n            ->columns([\n                // Computed column displays the variant name.\n                // When using the \"all\" filter, it will use the joined field, otherwise fallback to the main variant.\n                Tables\\Columns\\TextColumn::make('name')\n                    ->label(__('crud.products.inputs.name.label'))\n                    ->getStateUsing(fn ($record): ?string => $record->variant_name ?? $record->mainVariant?->name),\n                Tables\\Columns\\TextColumn::make('status')\n                    ->label(__('crud.products.inputs.status.label')),\n                Tables\\Columns\\TextColumn::make('name')\n                    ->label(__('crud.products.inputs.name.label')),\n                Tables\\Columns\\TextColumn::make('type')\n                    ->label(__('crud.products.inputs.type.label')),\n                Tables\\Columns\\TextColumn::make('description')\n                    ->label(__('crud.products.inputs.description.label'))\n                    ->limit(255),\n                Tables\\Columns\\TextColumn::make('price')\n                    ->label(__('crud.products.inputs.price.label')),\n                Tables\\Columns\\TextColumn::make('short_description')\n                    ->label(__('crud.products.inputs.short_description.label'))\n                    ->limit(255),\n            ])\n            ->filters([\n                Tables\\Filters\\SelectFilter::make('variant_type')\n                    ->default('main') // Set the default filter to show only main variants.\n                    ->label('Variant Type')\n                    ->options([\n                        'main' => 'Only Main Variant',\n                        'all'  => 'All Variants',\n                    ])\n                    ->query(function (Builder $query, array $data): Builder {\n                        // When the user selects \"all\" display all product variant rows.\n                        // Otherwise, do not alter the query so that only the main variant is used in the computed column.\n                        if ((($data['value'] ?? 'main')) === 'all') {\n                            return $query->join(\n                                'product_variants',\n                                'product_variants.product_id',\n                                '=',\n                                'products.id'\n                            )->addSelect('product_variants.name as variant_name');\n                        }\n\n                        return $query;\n                    }),\n            ])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    /**\n     * Define the form used for creating and editing products.\n     */\n    public static function form(Forms\\Form $form): Forms\\Form\n    {\n        return $form->schema([\n            // Attach the current store using a hidden field.\n            Forms\\Components\\Hidden::make('store_id')\n                ->default(fn () => optional(Filament::getTenant())->id),\n            // Basic Details Section.\n            Split::make([\n                Section::make(__('crud.products.section.details'))\n                    ->schema([\n                        // Grid wrapping general product info.\n                        Forms\\Components\\Grid::make(['default' => 1])\n                            ->schema([\n\n                                Forms\\Components\\TextInput::make('name')\n                                    ->label(__('crud.products.inputs.name.label'))\n                                    ->required()\n                                    ->string(),\n                                Forms\\Components\\Select::make('type')\n                                    ->label(__('crud.products.inputs.type.label'))\n                                    ->options([\n                                        'physical'     => 'Physical',\n                                        'digital'      => 'Digital',\n                                        'service'      => 'Service',\n                                        'subscription' => 'Subscription',\n                                        'event'        => 'Event',\n                                    ])\n                                    ->nullable(),\n                                //TODO Consider removing short description completely\n//                                Forms\\Components\\RichEditor::make('short_description')\n//                                    ->label(__('crud.products.inputs.short_description.label'))\n//                                    ->nullable()\n//                                    ->string()\n//                                    ->fileAttachmentsVisibility('public'),\n                                Forms\\Components\\RichEditor::make('description')\n                                    ->label(__('crud.products.inputs.description.label'))\n                                    ->nullable()\n                                    ->string()\n                                    ->fileAttachmentsVisibility('public'),\n                                Forms\\Components\\TextInput::make('price')\n                                    ->label(__('crud.products.inputs.price.label'))\n                                    ->nullable()\n                                    ->numeric()\n                                    ->step(1),\n                            ]),\n\n                    ])->columns(1),\n\n\n                Group::make([\n                    Section::make(__('crud.products.inputs.status.label'))\n                        ->schema([\n                            Forms\\Components\\Select::make('status')\n                                ->label(__('crud.products.inputs.status.label'))\n                                ->required()\n                                ->options([\n                                    'published' => 'Published',\n                                    'draft'     => 'Draft',\n                                    'archived'  => 'Archived',\n                                ]),\n                    ]),\n                    // Images Section.\n                    Section::make(__('Bilder'))\n                        ->schema([\n                            Forms\\Components\\SpatieMediaLibraryFileUpload::make('main_image')\n                                ->collection('main_images')\n                                ->disk('s3')\n                                ->label(__('crud.products.inputs.main_image.label')),\n                            Forms\\Components\\SpatieMediaLibraryFileUpload::make('gallery_images')\n                                ->collection('gallery_images')\n                                ->disk('s3')\n                                ->multiple()\n                                ->maxFiles(10)\n                                ->nullable()\n                                ->label(__('crud.products.inputs.gallery_images.label')),\n                        ])->columns(1),\n                    // Collections Relationship Section.\n//                    Forms\\Components\\Section::make(__('Collections'))\n//                        ->description(__('Select the collections that this product belongs to.'))\n//                        ->schema([\n//                            Forms\\Components\\Select::make('collections')\n//                                ->label(__('Samlinger'))\n//                                ->multiple()\n//                                ->relationship('collections', 'name')\n//                                ->preload(),\n//                        ]),\n                ])->grow(false),\n            ])->from('md'),\n\n\n\n        ])->columns(1);\n    }\n\n    /**\n     * Define any resource relations.\n     */\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    /**\n     * Define the resource pages/routes.\n     */\n    public static function getPages(): array\n    {\n        return [\n            'index'  => Pages\\ListProducts::route('/'),\n            'create' => Pages\\CreateProduct::route('/create'),\n            'view'   => Pages\\ViewProduct::route('/{record}'),\n            'edit'   => Pages\\EditProduct::route('/{record}/edit'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse App\\Models\\Product;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\ProductResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ProductResource\\RelationManagers;\n\nclass ProductResource extends Resource\n{\n    protected static ?string $model = Product::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.products.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.products.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.products.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('store_id')\n                        ->label('Store')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('status')\n                        ->label(__('crud.products.inputs.status.label'))\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('name')\n                        ->label(__('crud.products.inputs.name.label'))\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('type')\n                        ->label(__('crud.products.inputs.type.label'))\n                        ->nullable()\n                        ->string(),\n\n                    RichEditor::make('description')\n                        ->label(__('crud.products.inputs.description.label'))\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    TextInput::make('price')\n                        ->label(__('crud.products.inputs.price.label'))\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    RichEditor::make('short_description')\n                        ->label(\n                            __('crud.products.inputs.short_description.label')\n                        )\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    TextInput::make('stripe_product_id')\n                        ->label(\n                            __('crud.products.inputs.stripe_product_id.label')\n                        )\n                        ->nullable()\n                        ->string(),\n\n                    DateTimePicker::make('deleted_at')\n                        ->label(__('crud.products.inputs.deleted_at.label'))\n                        ->rules(['date'])\n                        ->nullable()\n                        ->native(false),\n\n                    RichEditor::make('metadata')\n                        ->label(__('crud.products.inputs.metadata.label'))\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('store.name')->label('Store'),\n\n                TextColumn::make('status')->label(\n                    __('crud.products.inputs.status.label')\n                ),\n\n                TextColumn::make('name')->label(\n                    __('crud.products.inputs.name.label')\n                ),\n\n                TextColumn::make('type')->label(\n                    __('crud.products.inputs.type.label')\n                ),\n\n                TextColumn::make('description')\n                    ->label(__('crud.products.inputs.description.label'))\n                    ->limit(255),\n\n                TextColumn::make('price')->label(\n                    __('crud.products.inputs.price.label')\n                ),\n\n                TextColumn::make('short_description')\n                    ->label(__('crud.products.inputs.short_description.label'))\n                    ->limit(255),\n\n                TextColumn::make('stripe_product_id')->label(\n                    __('crud.products.inputs.stripe_product_id.label')\n                ),\n\n                TextColumn::make('deleted_at')\n                    ->label(__('crud.products.inputs.deleted_at.label'))\n                    ->since(),\n\n                TextColumn::make('metadata')\n                    ->label(__('crud.products.inputs.metadata.label'))\n                    ->limit(255),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [RelationManagers\\CollectionsRelationManager::class];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListProducts::route('/'),\n            'create' => Pages\\CreateProduct::route('/create'),\n            'view' => Pages\\ViewProduct::route('/{record}'),\n            'edit' => Pages\\EditProduct::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n"
        }
    ]
}